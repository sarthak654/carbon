import React, { useState, useRef, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { X, Send, Bot, User, Leaf } from 'lucide-react';

interface Message {
  type: 'bot' | 'user';
  content: string;
}

const ChatBot = () => {
  const [isOpen, setIsOpen] = useState(false);
  const [messages, setMessages] = useState<Message[]>([]);
  const [input, setInput] = useState('');
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const [isTyping, setIsTyping] = useState(false);
  const [showSuggestions, setShowSuggestions] = useState(true); // Tracks the visibility of suggestions
  const [suggestionUsed, setSuggestionUsed] = useState(false); // Tracks if a suggestion is used

  const chatbotResponses: { [key: string]: string } = {
    "what is carbon footprint": "A carbon footprint is the total amount of greenhouse gases (including carbon dioxide and methane) that are generated by our actions. This includes the emissions from transportation, energy use, food consumption, and more.",
    "how to reduce carbon footprint": "You can reduce your carbon footprint by: \n1. Using public transportation\n2. Installing solar panels\n3. Reducing meat consumption\n4. Using energy-efficient appliances\n5. Recycling and composting",
    "what are carbon credits": "Carbon credits are permits that represent reductions in greenhouse gas emissions. One carbon credit equals one ton of carbon dioxide or equivalent gases. Companies and individuals can purchase these credits to offset their emissions.",
    "how do carbon credits work": "Carbon credits work through a cap-and-trade system. Organizations that reduce their emissions below their allocated limit can sell their excess credits to others who exceed their limits. This creates a financial incentive for reducing emissions.",
    "what is climate change": "Climate change refers to long-term shifts in global weather patterns and average temperatures, primarily caused by human activities that release greenhouse gases into the atmosphere.",
    "default": "I'm not sure about that, but I'd be happy to help you with questions about carbon footprints, credits, and environmental sustainability!"
  };

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const handleSendMessage = async (question: string) => {
    if (!question.trim()) return;

    // Add user message
    setMessages(prev => [...prev, { type: 'user', content: question }]);
    setInput('');
    setIsTyping(true);

    // Hide suggestions after a suggestion is clicked
    if (!suggestionUsed) {
      setShowSuggestions(false); // Hide suggestions if a user selects a suggestion
    }

    // Simulate bot typing
    setTimeout(() => {
      const response = chatbotResponses[question.toLowerCase()] || chatbotResponses['default'];
      setMessages(prev => [...prev, { type: 'bot', content: response }]);
      setIsTyping(false);
    }, 1500);
  };

  const handleSuggestionClick = (question: string) => {
    setSuggestionUsed(true); // Track that a suggestion was used
    handleSendMessage(question);
  };

  // Filter out "hello" and "hi" from the suggestions
  const filteredSuggestions = Object.keys(chatbotResponses).filter(
    (question) => question !== "hello" && question !== "hi" && question !== "default"
  );

  return (
    <>
      {/* Floating Chat Button */}
      <motion.button
        className="fixed bottom-6 right-6 p-4 bg-green-500 text-white rounded-full shadow-lg hover:bg-green-600 transition duration-300"
        whileHover={{ scale: 1.1 }}
        whileTap={{ scale: 0.95 }}
        onClick={() => setIsOpen(true)}
      >
        <Leaf className="w-6 h-6" />
      </motion.button>

      {/* Chat Window */}
      <AnimatePresence>
        {isOpen && (
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: 20 }}
            className="fixed bottom-24 right-6 w-96 h-[500px] bg-white dark:bg-gray-800 rounded-2xl shadow-2xl flex flex-col overflow-hidden"
          >
            {/* Chat Header */}
            <div className="flex justify-between items-center p-4 bg-gradient-to-r from-green-400 to-green-600 text-white rounded-t-2xl">
              <div className="flex items-center space-x-2">
                <Bot className="w-8 h-8" />
                <div>
                  <h3 className="font-semibold text-lg">Carbon Assistant</h3>
                  <p className="text-sm">Let's talk about sustainability!</p>
                </div>
              </div>
              <button
                onClick={() => setIsOpen(false)}
                className="p-2 hover:bg-gray-200 dark:hover:bg-gray-700 rounded-xl"
              >
                <X className="w-5 h-5 text-white" />
              </button>
            </div>

            {/* Chat Messages */}
            <div className="flex-1 overflow-y-auto p-4 space-y-4">
              {messages.map((message, index) => (
                <motion.div
                  key={index}
                  initial={{ opacity: 0, y: 10 }}
                  animate={{ opacity: 1, y: 0 }}
                  className={`flex ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}
                >
                  <div
                    className={`max-w-[75%] p-3 rounded-xl shadow-md ${
                      message.type === 'user' 
                        ? 'bg-gradient-to-br from-green-400 to-green-600 text-white' 
                        : 'bg-gradient-to-br from-gray-50 to-gray-100 dark:from-gray-700 dark:to-gray-600'
                    }`}
                  >
                    <p className={`text-sm whitespace-pre-line ${
                      message.type === 'user' 
                        ? 'text-white' 
                        : 'text-gray-800 dark:text-gray-200'
                    }`}>
                      {message.content}
                    </p>
                  </div>
                </motion.div>
              ))}
              {isTyping && (
                <motion.div
                  initial={{ opacity: 0 }}
                  animate={{ opacity: 1 }}
                  className="flex items-center gap-2 text-gray-500 dark:text-gray-400 p-4 bg-gradient-to-br from-gray-50 to-gray-100 dark:from-gray-700 dark:to-gray-600 rounded-xl shadow-md"
                >
                  <Bot className="w-4 h-4" />
                  <span className="text-sm font-medium">Typing...</span>
                </motion.div>
              )}
              <div ref={messagesEndRef} />
            </div>

            {/* Predefined Question Suggestions */}
            {showSuggestions && (
              <div className="p-4 bg-gradient-to-br from-gray-50 to-gray-100 dark:from-gray-800 dark:to-gray-700 border-t border-gray-200 dark:border-gray-700">
                <div className="space-y-2">
                  {filteredSuggestions.map((question) => (
                    <motion.button
                      key={question}
                      onClick={() => handleSuggestionClick(question)}
                      className="w-full py-2 px-4 text-sm text-left rounded-lg bg-green-200 hover:bg-green-300 text-gray-800 shadow-sm transition duration-300"
                    >
                      {question}
                    </motion.button>
                  ))}
                </div>
              </div>
            )}

            {/* Chat Input */}
            <div className="p-4 bg-gradient-to-br from-gray-50 to-gray-100 dark:from-gray-800 dark:to-gray-700 border-t border-gray-200 dark:border-gray-700">
              <div className="flex gap-3">
                <input
                  type="text"
                  value={input}
                  onChange={(e) => setInput(e.target.value)}
                  onKeyPress={(e) => e.key === 'Enter' && handleSendMessage(input)}
                  placeholder="Ask about carbon footprint..."
                  className="flex-1 p-3 rounded-xl border border-gray-200 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-800 dark:text-white focus:outline-none focus:ring-2 focus:ring-green-500 dark:focus:ring-green-400 shadow-sm"
                />
                <motion.button
                  whileHover={{ 
                    scale: 1.05,
                    transition: { type: "spring", stiffness: 400, damping: 17 }
                  }}
                  whileTap={{ scale: 0.95 }}
                  onClick={() => handleSendMessage(input)}
                  className="p-3 bg-green-500 text-white rounded-xl shadow-lg hover:bg-green-600 transition duration-300"
                >
                  <Send className="w-5 h-5" />
                </motion.button>
              </div>
            </div>
          </motion.div>
        )}
      </AnimatePresence>
    </>
  );
};

export default ChatBot;